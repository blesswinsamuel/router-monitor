// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ebpfFirewallPacketStatsKey struct {
	EthProto uint16
	_        [2]byte
	Srcip    uint32
	Dstip    uint32
	IpProto  uint8
	_        [3]byte
}

type ebpfFirewallPacketStatsValue struct {
	Packets uint64
	Bytes   uint64
}

// loadEbpfFirewall returns the embedded CollectionSpec for ebpfFirewall.
func loadEbpfFirewall() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_EbpfFirewallBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ebpfFirewall: %w", err)
	}

	return spec, err
}

// loadEbpfFirewallObjects loads ebpfFirewall and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ebpfFirewallObjects
//	*ebpfFirewallPrograms
//	*ebpfFirewallMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadEbpfFirewallObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadEbpfFirewall()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ebpfFirewallSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfFirewallSpecs struct {
	ebpfFirewallProgramSpecs
	ebpfFirewallMapSpecs
}

// ebpfFirewallSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfFirewallProgramSpecs struct {
	TcPacketCounter *ebpf.ProgramSpec `ebpf:"tc_packet_counter"`
}

// ebpfFirewallMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfFirewallMapSpecs struct {
	PacketStats *ebpf.MapSpec `ebpf:"packet_stats"`
}

// ebpfFirewallObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadEbpfFirewallObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfFirewallObjects struct {
	ebpfFirewallPrograms
	ebpfFirewallMaps
}

func (o *ebpfFirewallObjects) Close() error {
	return _EbpfFirewallClose(
		&o.ebpfFirewallPrograms,
		&o.ebpfFirewallMaps,
	)
}

// ebpfFirewallMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadEbpfFirewallObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfFirewallMaps struct {
	PacketStats *ebpf.Map `ebpf:"packet_stats"`
}

func (m *ebpfFirewallMaps) Close() error {
	return _EbpfFirewallClose(
		m.PacketStats,
	)
}

// ebpfFirewallPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadEbpfFirewallObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfFirewallPrograms struct {
	TcPacketCounter *ebpf.Program `ebpf:"tc_packet_counter"`
}

func (p *ebpfFirewallPrograms) Close() error {
	return _EbpfFirewallClose(
		p.TcPacketCounter,
	)
}

func _EbpfFirewallClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ebpffirewall_arm64_bpfel.o
var _EbpfFirewallBytes []byte
